package Chapter_12.Item_86;


/* Serializable을 구현할지는 신중히 결정하라

- 어떤 클래스의 인스턴스를 직렬화 할 수 있게 하려면 클래스 선언에 implements Serializable을 하면된다.
- Serializable을 구현하면 릴리즈 뒤에는 수정하기 어렵다.
- 클래스가 Serializable을 구현하면 직렬화된 바이트 스트림 인코딩도 하나의 공개 API가 되며, 이 클래스가 널리 퍼지는 
  경우에는 그 직렬화 형태도 영원히 지원되어야 한다.
- 커스텀 직렬화 형태를 설계하지 않고, 자바의 기본 방식을 사용하면, 직렬화 형태는 최소 적용 다시 클래스의 내부 구현 방식에 묶인다.
- 즉, 기본 직렬화 형태에서는 클래스의 private과 package-private 인스턴스 필드마저 API로 공개된다. (은닉, 캡슐화 x)
- 직렬화 가능 클래스를 만드고자 한다면, 길게 감당할 수 있는 만큼 고품질의 직렬화 형태도 주의해서 함께 설계해야 한다.

직렬화의 단점
- 직렬화는 클래스 개선을 방해할 수 있다.
- 버그와 보안 구멍이 샐길 위험이 높아진다.
	- 역직렬화 과정에서, 그대로 적용되는 숨은 생성자가 생긴다.
	- 불변식이 깨짐과 허가되지 않은 접근에 쉽게 노출되버린다.
- 해당 클래스의 신버전을 릴리즈 할 때 테스트 할 것이 늘어난다.
	- 구버전으로 역직렬화, 직렬화가 가능한지 테스트 해봐야 한다.
	
위와 같이 Serializable을 구현 하는 것은 쉽게 생각하면 안된다.
- 단, 객체를 전송하거나 저장할 때 자바 직렬화를 이용하는 프레임워크용으로 만들 클래스면 어쩔 수 없다.
- Serializable을 반드시 구현해야 하는 다른 클래스의 컴포넌트로 쓰일 클래스도 마찬가지다.
- 역사적으로 BigInteger, INstant 같은 '값' 클래스와 컬렉션 클래스들은 Serializable을 구현하고,
  스레드 풀처럼 동작 하는 객체를 표현한 클래스들을 대부분 Serializable을 구현하지 않았다.
* */
public class Item_86 {
}
