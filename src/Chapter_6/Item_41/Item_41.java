package Chapter_6.Item_41;


/* 정의하려는 것이 타입이라면 마커 인터페이스를 사용하라
marker interface = 아무 메서드도 담지 않고, 자신이 구현하는 클래스가 특정 속성을 가짐을 표시하는 인터페이스
EX) Serializable

마커 인터페이스 장점 (better than marker annotation)
1. 마커 인터페이스를 구현한 클래스의 인스턴스들을 구분하는 타입으로 쓸 수 있다
	- 어엿한 타입이기 때문에, 런타임에 발견될 오류를 컴파일 시점에 잡을 수 있다.
2. 적용 대상을 더 정밀하게 지정할 수 있다.

마커 애너테이션 장점
- 거대한 애너테이션 시스템의 자원을 받는다는 점

각각 언제 어떤 걸 써야 할까?

마커 애너테이션
- 클래스와 인터페이스 외의 프로그램 요소 (모듈, 패키지, 필드, 지역변수 등)에 마킹해야 할 때는 애너테이션을 쓸 수 밖에 없다.
- 런타임에 조건부 처리를 위해 리플렉션과 같이

마커 인터페이스
- 이 마킹이 된 객체를 매개변수로 받는 메서드를 작성할 일이 있을때
- 타입 안전성이 중요하고, 특정 타입의 객체만 매개변수로 받아야 할 때
* */















public class Item_41 {
}
