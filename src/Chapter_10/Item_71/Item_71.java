package Chapter_10.Item_71;



/* 필요 없는 검사 예외 사용은 피하라
- 검사 예외를 제대로 활용한다면, API와의 프로그램의 질을 높일 수 있다.
  -> 결과를 코드로 반환하거나, 비검사 예외를 던지는 것과 달리, 발생한 문제를 개발자가 직접 처리해 안전성을 높이기 때문
- 하지만 검사 예외는 필수로 예외를 처리해야 한다는 점, 검사 예외를 던지는 메서드는 스트림안에서 직접 사용할 수 없다는
  점 등으로 인해, 자바 8부터 부담이 커졌다.
  -> 따라서 검사 예외는 필요한 곳에서만 쓰고 남용하지 않는 것이 좋다.
  
비검사 예외 VS 검사 예외 선택하기
* 검사 예외 = API를 제대로 사용해도 발생할 수 있는 예외거나, 프로그래머가 의미 있는 조치를 취할 수 있는 경우
* 비검사 예외 = 복구할 방법이 없는 경우에 사용

검사 예외를 회피하는 방법
1. Optional
- 검사 예외를 회피하는 가장 쉬운 방법은 적절한 결과 타입을 담은 옵셔널을 반환하는 것이다. 검사 예외 대신, 빈 옵셔널 반환
  -> 하지만 옵셔널은 예외와 달리 구체적인 예외 타입과 메서드등을 활용 할 수 없기에, 부가 정보들을 담을 수 없다는 단점이 존재

2. 상태 검사 메서드 활용
- 상태 검사 메서드와 비검사 예외를 던지는 메서드로 바꿀 수 있다.
  -> 하지만 상태 검사 메서드는 여러 스레드가 동시에 접근할 수 있거나, 외부 요인에 의해 상태가 변할 수 있는 상황에
     안전하지 않다.

핵심 정리
- 꼭 필요한 곳에서만 검사 예외를 사용한다면 프로그램의 안전성을 높여주지만, 남용하면 좋지 않은 API를 야기한다.
- API 호출자가 예외 상황에서 복구할 방법이 없다면 비검사 예외를 던진다.
- 복구가 가능하고 호출자가 그 처리를 해주길 바란다면, 우선 옵셔널 반환을 고민해보자
- 옵셔널만으로 상황을 처리하기에 충분한 정보를 제공할 수 없을 때만 검사 예외를 던져야 한다.
* */





public class Item_71 {
}
