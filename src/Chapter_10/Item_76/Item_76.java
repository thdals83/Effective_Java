package Chapter_10.Item_76;



/* 가능한 한 실패 원자적으로 만들라.
- 호출된 메서드가 실패하더라도 해당 객체는 메서드 호출 전 상태를 유지해야 한다 = 실패 원자적 특성
메서드를 실패 원자적으로 만드는 다양한 방법
1. 가장 간단한 방법은 불변 객체로 설계하는 것
2. 흔방 방법은 작업 수행에 앞서 매개변수의 유효성을 검사하는 것이다. 내부 상태 변경 전에 잠재적 예외의 기능을 대부분 걸러냄

아래의 pop() 메서드를 예시로 든다면,
- 처음의 if문에서 size 값을 확인하여 예외를 던진다. 해당 if문이 없어도 예외는 발생하지만, 추상화 수준이 상황에 어울리지
않다고 볼 수 있다.
- 비슷한 취지로 실패할 가능성이 있는 모든 코드를, 객체의 상태를 바꾸는 코드보다 앞에 배치하는 방법도 있다.
public Object pop() {
   if (size == 0)
      throw new EmptyStackException();
   Object result = elements[--size];
   elements[size] = null; // 다 쓴 참조 해제
   return result;
}

3. 객체의 임시 복사본에 작업을 수행한다음, 작업이 성공적으로 완료된다면 이를 원래 객체와 교환하는 것
4. 작업 도중 발생하는 실패를 가로채는 복구 코드를 작성하여 작업 전 상태로 되돌리는 방법

실패 원자성은 일반적으로 권장되지만, 항상 달성할 수 있는 것은 아니다. 그리고 항상 그리 해야 하는 것도 아니다.
실패 원자성을 달성하기 위한 비용이나 복잡도가 아주 큰 여난도 있기 때문이다.
* */
public class Item_76 {
}
