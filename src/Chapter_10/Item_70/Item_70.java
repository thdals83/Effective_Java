package Chapter_10.Item_70;


/* 복구할 수 있는 상황에는 검사 예외를,
  프로그래밍 오류에는 런타임 예외를 사용하라
  
자바는 문제 상황을 알리는 타입(throwable)를 다음의 세가지로 제공한다.
1. 검사 예외: Exception 하위 클래스들
2. 런타임 예외: RuntimeException 하위 클래스들
3. 에러 Error 하위 클래스들

검사 예외
- 호출자는 반드시 그 예외를 catch로 잡아 처리하고나 throws를 통해 더 바깥으로 전파하도록 강제해야 한다.
- 즉 이는 API 설계자가 API 사용자에게 검사 예외를 던져주어, 그 상황에서 회복해내라고 요구한 것이라고 볼 수 있다.

비검사 예외
- 검사 예외와 달리 프로그램에서 잡을 필요가 없거나, 혹은 통상적으로 잡지 말아야 한다. 런타임 예외와 에러 두가지로 나뉜다.
* 런타임 예외
- 프로그래밍 오류를 나타낼 때
- 대부분 전제조건을 만족하지 못한 경우, 단순히 클라가 해당 API의 명세에 기록된 제약을 지키지 못했을 때
  EX) 배열의 인덱스는 0에서 -1이어야 하지만 이를 지키지 않으면, 비검사 예외인 ArrayIndexOutOfBoundsException 발생

* 에러
- JVM이 자원의 부족, 불변식 깨짐 등 더이상 수행을 계속할 수 없는 상황을 나타낼 때 사용한다.
  EX) OutofMemoryError, StackOverflowError 등등..

예외 메서드
- 예외도 하나의 객체이므로, 어떠한 메서드라도 정의할 수 있다.
- 주로 그 예외를 일으킨 상황에 대한 정보를 코드 형태로 전달하는데 쓰이는데, 만약 메서드를 정의하지 않았다면
  프로그래머들은 오류 메시지를 파싱해 직접 정보를 빼내야 하므로 정의하는게 좋다.
- 특히, 검사 예외는 호출자가 예외 상황에서 벗어나 복구할 수 있도록 필요한 정보를 알려주는 메서드를 함께 제공하는 것이 중요  
* */







public class Item_70 {
}
