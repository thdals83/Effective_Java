package Chapter_8.Item_51;


/* 메서드 시그니처를 신중히 설계하라

메서드 이름을 신중히 짓자
- 표준 명명 규칙을 따를 것
- 개발자 커뮤니티에서 널리 받아들여지는 일므을 사용할 것 (긴 이름은 피하자)

---------------------------------------------------------------------------

편의 메서드를 너무 많이 만들지 말자
- 메서드가 너무 많은 클래스나 인터페이스는 익히고, 사용화, 문서화, 테스트, 유지보수 하기 어렵다.
- 아주 자주 쓰일 경우에만 별도의 약칭 메서드를 두기 바라고, 확신이 서지 않으면 만들지 말자

---------------------------------------------------------------------------

매개변수 목록은 짧게 유지하자
- 4개 이하가 좋다.
- 같은 타입의 매개변수 여러개가 연달아 나오는 경우 해롭다.

과하게 긴 매개변수 모골긍ㄹ 짧게 줄여주는 기술 세가지
1. 여러 메서드로 쪼갠다.
	- 쪼개진 메서드는 각각의 부분집합을 받는다.
	- 직교성을 높여 메서드 수가 줄어들 수 있다. 
	- EX) List 인터페이스
2. 매개변수 여러 개를 묶어주는 도우미 클래스를 만든다.
	- 일반적인 도우미 클래스는 정적 멤버 클래스로 둔다.
	- 잇따른 매개변수 몇 개를 독립된 하나의 개념으로 볼 수 있을 때 추천
		- EX) 카드게임 클래스를 만들 때, 메서드 호출 시 카드의 숫자(rank)와 무늬(suit)를 뜻하는 두 매개변수를 항상 같은 순서로 전달할 것이다.
			  그래서 이 둘을 묶는 도우미 클래스를 만들어 하나의 매개변수로 주고 받는식
3. 객체 생성에 사용한 빌더 패턴을 메서드 호출에 응용한다.
	- 앞의 두 방식을 혼합항 형태로, 매개변수가 많지만 그중 일부를 생략해도 될 때 쓴다.
	
---------------------------------------------------------------------------

매개변수의 타입으로는 클래스보다는 인터페이스가 더 낫다.
- 메서드에 HashMap, TreeMap 등등을 넘기지 말고, Map을 넘기면 용이하게 넘길 수 있으니 인터페이스를 사용한다.

---------------------------------------------------------------------------

boolean 보다는 원소 2개짜리 열거 타입이 낫다.
- 열거 타입을 사용하면 코드를 읽고 쓰기 쉬워진다.
  EX) 화씨온도와 섭씨온도를 원소로 정의한 열거 타입을 보자.
	public enum TemperatureScale { FAHRENHEIT, CELSIUS }
	Thermometer.newInstance(true) 보다는 
	Thermometer.newInstance(TemperatureScale.CELSIUS)가 하는 일을 명확히 알려주며, 
	이후에 종류가 늘어나면 정적 메서드를 추가할 필요 없이 열거 타입에만 추가해주면 된다.

* */
public class Item_51 {
}
